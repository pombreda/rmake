.\" Copyright (c) 2006-2007 rPath, Inc.
.TH RMAKE 1 "23 May 2006" "rPath, Inc."
.SH NAME
rmake \- Environment-controlled package building tool
.SH SYNOPSIS
.B rmake \fIcommand \fR[\fI<args>\fR]
.SH DESCRIPTION
\fBrmake\fR is a package building tool and is part of the \fBconary\fR suite
of programs. It differs from the \fBcvc\fR tool in that it can build a
collection of packages in a set of related builds, and it builds a chroot
based on the build requirements of the package.  Packages are built and
stored in a local repository until you wish to commit them.

After packages have been built and stored into this exclusive rmake local
repository, they are then cloned from this repository to your main repository
upon committing them. For more information about the architecture of rMake,
see the rMake developer documentation.

\fBNote that rMake is now at a STABLE RELEASE; behavior is generally likely
to remain the same or be expanded upon until the next major release of rMake.
(Major versions are described by a bump in the first or second number, 1.0
to 1.1 will be a major version bump).  Backwards compatible changes may be 
made. Read the NEWS file for information on changes and updates.\fR

.SH REFERENCE
rMake has several common command-line arguments, all of which modify
configuration entries and are documented with other configuration
entries at the bottom of this page.  The remaining command-line
arguments are specific to which rMake \fBcommand\fP you are invoking,
and are documented with the commands.

In most cases, the default behavior of rmake is based upon the behavior of
conary in a similar situation. For example, if conary rq foo returns package
foo from repository foo.rpath.com on your system, then rmake build foo will
build foo from that repository.  
.SS "Build Management"
The following \fBcommands\fP are used to start, query, monitor, and commit
builds using rMake.
.TP 4
.B [build] [<\fItrovename\fP[=\fI<versionSpec>\fP\fI[<flavor>]\fP>]|<recipe>]\fI[<flavor>]\fP\fI[{context}]\fP
Builds the packages specified.  If a versionSpec is specified, it should
point to a source version of \fI<troveName>\fP. Although this command finds
source packages to build, the :source component part of the name is implicit.

If a recipe is specified, and that recipe is a source checkout from a
repository, then rmake will shadow that recipe to rmake's internal repository
and commit your local changes to that shadow.  Then, when you commit that
job, the related source component(s) will be also be committed.  

You can also build recipes that are not source checkouts.  They will be committed to the branch that is your buildLabel, as if you'd done "rmake newpkg <pkg>; cd <pkg>; rmake build <pkg>.recipe; rmake commit".

Example: \fIrmake build 'glib=foresight.rpath.org@fl:desktop/1.0-1[!mysql]'\fP
would build glib from the foresight repository, with the mysql flavor turned
off.

In rMake only, a context may be specified at the end of the trove spec.  The context will only be applied to the one trove it is attached to.  This context will be added into any default context specified for all troves.

Example:  \fIrmake build glib{x86_64} glib{x86} --context foresight\fP would build glibc for both x86_64 and x86 platforms, assuming there are contexts [x86_64] and [x86] in your rmake or conary configuration.  Both would pick up the base configuration from the [foresight] context.

More information on version specs and flavors is available in the conary
documentation and on the conary Wiki.

rMake can also build groups, redirects and filesets, \fIas long as they are the only trove specfied as part of the job\fP.  If these types of troves are specified as part of a larger job they will be failed.  This limitation may be lifted in a future version of rMake.

If you use the command build --recurse instead of build, groups that are specified at the command line will cause rMake to find the source version of this group and build all contained troves.  It does not currently pay attention to removes lines to avoid building troves, and it does not recurse into other groups that are added.

If you add the \-\-binary-search option with build --recurse, rMake will instead find the matching \fIbinary\fP version of this group, and rebuild the packages within that group with the flavors they were built with previously.

.RS 4
.TP
.B \-\-commit
After the build finishes successfully, commit the build.  This is like running
rmake build <job> followed by rmake commit <jobId>.  If the build does not
complete successfully, the commit is not performed.
.TP
.B \-\-recurse
Groups that are specified with build --recurse at the command line will cause 
rMake to find the source version of this group and build all contained troves.  
It does not currently pay attention to removes lines to avoid building troves, 
and it does not recurse into other groups that are added.
.TP
.B \-\-flavor=FLAVOR
Specify the flavor to build with.  For example, rMake uses this parameter to 
support building x86 packages on x86_64 systems.  To build x86 troves on an
x86_64 system, type rmake build foo --flavor 'is:x86(~cmov,~i486,~i586,~i686)'
.TP
.B \-\-message
(Alias: -m)

When committing automatically after the build, this is the message to use as a 
log for all source commits.
.TP
.B \-\-no-clean
Do not clean chroots after builds finish successfully.  Note that only the 
final package built can actually be left around - the rest must be removed to 
make room for the new troves.
.TP
.B \-\-host=HOST
Can be used multiple times.  Limits a build to the given host(s).  This
command is useful when building groups using rmake, when you only have
control over commit access to a few labels.
.TP
.B \-\-label=LABEL
Can be used multiple times.  Limits a build to the given label(s).  This
command is similar to \-\-host above, but it is more specific.
.TP
.B \-\-macro="NAME VALUE"
Uses the value VALUE for macro NAME for each recipe.  Equivalent to the same
option for cvc cook.
.TP
.B \-\-prep
Creates the chroot and checks out the package in the chroot but does not build it.
.TP
.B \-\-match="[-][name][=version][[flavor]]"
Causes the troves specified (usually by build --recurse) to be filtered so that
only the troves matching the --match parameters will be used.

Example: rmake build --recurse group-dist --match=tmpwatch --match="=:1-compat" --match="kernel[kernel.smp]" --match="-kernel[xen]"

This will build any trove in group-dist that has the name tmpwatch, as well as any trove that is has a label that ends in :1-compat, as well as kernels in group-dist with the flavor kernel.smp, unless they have the smp flavor.
.TP
.B \-\-no-watch
Do not run \fIrmake watch\fP immediately after starting the build.
See \fIwatch\fP for more information.
.TP
.B \-\-quiet
Prints the job ID only. This option can be useful when automating builds.
.TP
.B \-\-info
Displays debugging information about the build that would be performed.  Useful for seeing exactly what information you are sending to the rMake server to be built.
.TP
.B \-\-reuse
Triggers the reuseRoots config option, useful for iterative test builds.
See reuseRoots config option for more information. (--no-reuse turns off this
functionality if it's turned on from the config file).
.RE
.TP
.B restart \fI<jobId>\fP \fI[troveSpec]*\fP
Restarts the job specified.  This will find the same sources as if you had specified the same "rmake build" command as you did for job \fI<jobId>\fP.  If those sources are the same as the one found when building job \fI<jobId>\fP, and the same prerequisites would be installed into a root to build that source, the that source will be marked as already built.

If you specify additional troves, they will be added onto the earlier job.

In between when the state is marked as potentially already built and when rMake has actually determined that all of the build prerequisites are exactly the same, the trove will be marked as "Prebuilt".  When the trove has been marked as already built it will move into the "Built" status and be indistinguishable from other troves that were actually built as part of the job.
.RS 4
.TP
.B \-\-no-update
Do not update any of the packages in this build to newer versions.  Instead, use all of the source versions used by the last rebuild of these packages.
.TP
.B \-\-update \fI[-]<troveSpec>\fP
May be specified multiple times.  Ordered.  Specifies that the particular package be updated or not be updated.  If the first update specifier given is positive, then it is assumed that by default no other package should be updated.  If the first update specifier given is negative, then it is assumed that by default all packages should be updated _except_ the ones listed.

For example, "rmake restart 6 --update tmpwatch" will only update the tmpwatch package and use the same source versions as used for the last build for rest of the packages.

"rmake restart 6 --update -tmpwatch" will update all packages except tmpwatch.

Globs may be used in the trove names, and more explicit updates may be used to override the globs.  For example, "rmake restart --update -info-* --update info-foo" will not update any info- packages except for info-foo.
.TP
.B \-\-exclude \fI<troveSpec>\fP
May be specified multiple times.  Removes any troves matched from the build, as if a negative matchTroveRule had been added.
.TP
.B \-\-update-config \fI<configKey>|all\fP
May be specified multiple times.  Makes the job use the new values for the given configuration keys on restart.  For example, "rmake restart --update-config=installLabelPath will use all the configuration values from the old build for flavor, resolveTroves, etc, but will use the current values for given configurations the installLabelPath.
.RE
.TP
.B changeset \fI<jobId>\fP \f[troveSpec]*\fP \fI<path>\fP 

Creates a changeset for the given \fIjobId\fP and stores it at \fI<path>\fP.
The created changeset contains all the binaries built for this job.  If you specify any troveSpecs, they the matching troves from the job will be added to the changeset instead of all such troves.  This works exactly like running conary 
changeset <packages> \fI<path>\fP where packages is a list of troves built by \fIjobId\fP.

.TP
.B commit \fI<jobId>+\fP
(Alias: ci)

Commits the binaries built in the given jobIds to repository where they were 
loaded.
This command is exactly like running several
\fIconary clone <branch> <packages>\fP commands, where branch is the branch
that the packages are built from.  Note that if you cooked from a recipe, then 
the source components are also committed upstream.  (Warning: if you cook from a recipe, you must immediately run cvc up in the checkout after the commit to avoid having to merge conflicts.)

If the commit is successful, then rMake will attempt to update any source 
directories associated with those packages.  This may fail if you have made
local changes to that directory after starting the cook, in that case,
rMake will print the error message to the screen.
.RS 4
.TP 4
.B \-\-commit-outdated-sources
By default, rMake will not let you commit a change to a source component if it has 
been modified by someone else upstream.  This overrides that constraint.
.TP 4
.B \-\-source-only
Commit any changes made to sources by building *.recipe files, without 
committing the resulting binaries.
.B \-\-message
The message to use as a log for all source commits.
.TP 4
.B \-\-exclude \fI<troveSpec>[{context}]\fP
Can be specified multiple times.  Will not commit the given package in the commit.  \fBUse with care\fP - this could allow you to commit a package that does not have its dependencies completed.
.TP
.B config
Displays the configuration settings for the rmake client, including build 
configuration. For more detail on configuration values see the FILES section 
below.
.RS 4
.TP 4
.B \-\-show-passwords
Normally, rmake config will mask passwords in repository maps, to avoid their
accidental display.  You can override this masking with --show-passwords.
.RE
.TP
.B delete \fI<jobId>[-<jobId>]+\fP
Deletes the given jobs and all associated data from your system.
.RE
.TP
.B help \fI[command]\fP
With now argument, displays all commands for rMake, including less commonly used commands that are not displayed in the main message.  With a command, displays detailed help for that command.
.RE
.TP
.B watch \fI<jobId>\fP
Monitors the given jobId, printing out updates as they happen.  Will also tail 
any build logs.
.RS 4
.TP 4
.B \-\-quiet
Decreases the output of watch significantly, limiting it to critical
notifications, such as when a trove is building and when it has built or failed
to build.
.RE
.TP
.B query [\fI<jobId>\fR [\fItrovename\fP[=\fRversion][\fI<flavor>\fP]\fP]]+
If no arguments are given, information about all jobs are listed.  Otherwise, 
displays information about a job.  You can also query for a particular trove 
by specifying the trove after the jobId.
\fBNOTE: query output, options, and so on are very likely to change in future 
iterations of rmake.\fP
.RS 4
.TP 4
.B \-\-all
rMake shows the last 20 jobs by default, this option will cause rmake to list all jobs.
.TP
.B \-\-active
Causes rMake to only list jobs that are currently active.
.TP
.B \-\-logs
Displays trove, job, and build logs for the particular job or trove.
.TP
.B \-\-info
Displays information on the specified job and troves, including build time
and status.
.TP
.B \-\-flavors
Displays full flavors of all troves.
See the conary manual page for more details about flavors.
.TP
.B \-\-full-versions
Full version strings are displayed instead of abbreviated version numbers
.TP
.B \-\-labels
Label plus version numbers are displayed instead of abbreviated version
numbers
.TP
.B \-\-watch
Runs \fIrmake watch\fP immediately after querying.  Convenience function.
See \fIwatch\fP for more information.
.TP
.B \-\-tracebacks
If a traceback is associated with a trove or job, that traceback is
displayed.
.TP
.B \-\-troves
Lists basic information about the troves within a trove.  This option is 
assumed with many other options.
.RE
.TP
.B stop \fI<jobId>\fP
Stops the given job, failing any current builds.
.RE
.SS "Chroot Management"
The following \fBcommands\fP are used to debug, archive, and remove chroots
that were made as a part of building packages in rMake.
.TP 4
.B archive \fI<chrootName>\fP [\fI<newName>\fP]
Archives the given chroot so that it will not be overwritten by a future build.
The chroot is moved to a separate directory.  After archiving, the chroot can be accessed by "rmake chroot archive/<newName>"
.RE
.TP 4
.B chroot \fI<jobId>\fP \fI[<trove>]\fP
Enters the chroot specified by \fI<jobId>\fP and \fI<trove>\fP as the
rmake-chroot user and runs "sh", allowing you to execute commands in the
chroot as the build process did.  If you do not specify the trove, rMake will
find the trove automatically if there's only one trove in the job.
.RS 4
.TP 4
.B \-\-super
Enters the rmake chroot as the rmake version of the "super" user, which is the 
rmake daemon user itself.  With this user you can install packages into the 
chroot by running commands such as "conary update strace".
.TP
.B \-\-path <path>
Specifies the path to use for this package.  Useful in cases where the rmake 
server has been restarted and the path information for a build has been
reset.
.RE
.TP 4
.B clean \fI[<chrootName>]\fP \fI[--all]\fP
Removes the given chroot, freeing the disk space it used.
.RS 4
.TP 4
.B \-\-all
Removes all chroots.
.RE
.\"
.\"
.\"
.TP 4
.B list chroots
Lists the chroots that rMake knows about.  The names listed here can be used
by the other rmake chroot commands.  If the trove that was built in that chroot is known, rMake will list that information.

The output of the command is likely to change.
.RE
.TP
.B checkout \fI<package>\fR+
Works like "cvc checkout" - Check the \fI<package>\fB:source\fR component out of the repository
and put it in directory \fI<dir>\fP if specified, and directory
\fI<trove>\fP otherwise.  Fetches the most recent version
specified by \fBbuildLabel\fP unless \fI<version>\fP is specified.
Multiple source troves may be specified if the \-\-dir option is
not used.
Synonyms: \fBco\fP
.RE
.TP 4
.B newpkg [\fI--template <recipeTemplate>\fP] \fI<name\fP[=\fIlabel\fP]>\fP
Creates a new package.
.TP 4
.B context [name] [\-\-show-passwords]\fP
When not passed a name, displays information about the current context.
See \fIman conary\fP for more information on contexts, and the show-passwords
option.
.IP
When passed a name, sets the context to <name> for the current directory.
That context will then be used for all conary
operations in the directory.  The commands \fBcvc checkout\fP and 
\fBcvc newpkg\fP will transfer the current context into their newly 
created directories.
.RE
.RE
.\"
.\"
.\"

.SH FILES
.\" do not put excess space in the file list
.PD 0
.TP 4
.I /etc/rmake/rmakerc, ~/.rmakerc, and $PWD/rmakerc
The configuration file for the rmake client. rMake also reads in
/etc/conaryrc, $HOME/.conaryrc, and ./conaryrc to determine default values
for conary configuration, and also supports configuration contexts
(see conary(1) for information about contexts).  Note that for
simplicity, rMake reads in all conary configuration values. The currently
documented conary configuration values affect rMake operation.

Contexts can be defined in rMake configuration files as well.  Values set
in an rmake context will override those set in a conary context.  The context
is applied _before_ reading in all rmakerc values, so that a buildLabel
set in a rmake config file will override that set in an conary context,
while a buildLabel set in an rmake context will override the one set in
the rmake configuration file.

Configuration values can also be specified via command line options, including
the \fB\-\-config\fR option, which allows you to override one line in the
config file, and the \fB\-\-build-config-file\fR option, which reads in an
additional, supplied config file) override all build configuration files.  

You may also use \fB\-\-conary-config-file\fR to point rmake to a particular
conary config file you wish rmake to read, and \fB\-\-server-config-file\fR to
tell it to read the default server configuration values for a particular
location.  (The server configuration file is read to determine how to
communicate with the server, see the rmake-server man page for details on those
configuration values).  The \fB\-\-server-config\fR option can be used to
specify individual server config values, like the \fB\-\-config\fR option for
build configuration values.

Note you can always use \fIrmake config\fR to see the current value of a
configuration item.  This is the best way to determine what rmake has
actually interpreted for the configuration value.
 
 Make configuration items can be strings,
booleans (\fBTrue\fP or \fBFalse\fP), or mappings (\f(BIfrom to\fP) and
can include:
.PD
.RS 4
.TP 4
.B copyInConary
Copies the Conary used to run rMake outside of the chroot into the 
chroot.  Helpful when testing changes made to Conary in the rMake environment,
for example.  Defaults to False.
.TP
.B copyInConfig
Copies in files that affect build configuration, such as defaultMacros, 
useDirs, componentDirs, etc.  This allows rMake to mimic your current cvc 
configuration.  Defaults to True.  Turned off by strictMode.
.TP
.B defaultBuildReqs
Defines the troves to install in every build root, even if they are not
specified as build requirements for the package.  This should include enough
information to create a working chroot with conary and conary-build.
The default value is bash:runtime, coreutils:runtime, conary:runtime,
conary-build:runtime, epdb (a debugging utility), dev:runtime, grep:runtime,
procps:runtime, sed:runtime, findutils:runtime, and gawk:runtime.
.TP
.B pluginDirs
Directories in which rMake plugins can be found.  Defaults to /etc/rmake/plugins.d, ~/.rmake/plugins.d.  See PLUGINS section for more information.
NOTE: All plugin loading related options, such as this one, cannot be included in contexts, and cannot be overridden with --config command line options, because plugins can affect the behavior of the command line and must be read in before command line processing is done.

Plugin directories can be specified by the plugin-dirs command line option, in this format: --plugin-dirs=<dir>,<dir>.  Note that the = is not optional.
.TP
.B enablePlugins
Whether or not to enable plugins.  Defaults to True.  Can also be specified by 
the --disable-plugins command line option.

NOTE: All plugin loading related options, such as this one, cannot be included in contexts, and cannot be overridden with --config command line options, because plugins can affect the behavior of the command line and must be read in before command line processing is done.
.TP
.B enablePlugin <name> <bool>
Enables or disables a particular plugin.  By default all plugins are enabled.

NOTE: All plugin loading related options, such as this one, cannot be included in contexts, and cannot be overridden with --config command line options, because plugins can affect the behavior of the command line and must be read in before command line processing is done.
.TP
.B subscribe
Subscribe is an experimental option, and should not be used except by
developers. Documentation is forthcoming for this option.
.TP
.B matchTroveRule
Specifies what troves should be built when building groups recursively.
MatchTroveRules can be specified multiple times, and should consist of parts of a name=version[flavor] type trove specifier.  All parts of the specifier are optional: if the name is left blank, then the version and flavor must match for all troves.  If a flavor is specified, then the matchTroveRule will match all troves that have that flavor in them.

MatchTroveRules can be made negative by prepending a '-' in front of the rule.  For example, "matchTroveRule -=localhost@rpl:linux" would specify not to build anything on localhost@rpl:linux".  

All positive match rules are applied before all negative rules.  For example, if you had match rules for "foo" and "-localhost@rpl:linux" this would build foo unless it was on localhost@rpl:linux.

A * can be used in the package name portion of the rule to match 0 or more name characters.  For example, foo* would match packages with names foo or foobar.
.TP
.B resolveTroves
Specifies the troves to resolve against when building troves using rmake.
If build requirements and dependencies for build requirements can be found in
these groups, then rmake will use those troves to resolve dependencies.
This allows you to build troves in the context of a preexisting group,
for example, instead of just using what is latest on the label.


The resolveTroves list is ordered into "buckets".  One bucket is given for 
each resolveTrove line.  For example, if the two resolveTrove lines:

resolveTroves group-x11=foo.rpath.org@rpl:devel gtk=gtk.rpath.org@rpl:devel
resolveTroves group-dist

Were added, then the specified group-x11 and gtk would be searched before
group-dist.  Creating new buckets can slow down dependency resolution, however.

To disable resolveTroves, add the line 'resolveTroves []'
.TP
.B resolveTrovesOnly
resolveTrovesOnly turns off the use of the installLabelPath by conary, limiting
conary to only including troves that are referenced in resolveTroves.
.TP
.B reuseRoots
reuseReoots causes the rMake chroot builder to reuse any chroot that exists,
modifying it so that the troves installed in the chroot matches the required
trove for building the package.

Note that this option is most useful for iterative \fItest\fP builds.  It 
creates packages that may not be as clean as builds created with this option
turned off.  This is because erasing packages from a root may leave behind
unowned or modified files, create unnessary users, and so on.  In general, use
this option for iterative test builds of a single package, and leave it off 
otherwise.
.TP
.B strictMode
Strict mode disables the copying in of configuration files from your system.
The conary instance from your running system will not be copied into the build
root if strict mode is used; the conary instance installed in that root will
be used instead. If enforceManagedPolicy is off, strict mode will also turn it
on.  If copyInConary or copyInConfig are True, they will be set to False.

The following values are still copied into the chroot: repositoryMap entries,
proxy info, user info, signature keys, buildFlavor, flavor, cleanAfterCook,
and installLabelPath.

StrictMode defaults to False
.TP
.B targetLabel
Specifies the label to build troves against.  Modification of this value is
almost never necessary. By default, this is a label on the rmake internal
repository, \fIlocalhost\fP.  For more information on this repository, see
rmakeserver(1) and the architecture documentation.

When interpreting this value, rmake translates the case-insensitive value
none to the current value for the trove that is being built.  For example,
suppose you were building something from foo@rpl:1, and your targetLabel
was localhost@NONE:NONE, then the trove would be built on localhost@rpl:1.
.TP
.B uuid
A 32 character hex string that is a unique identifier for this build.  This 
value is generally not used for normal builds, but is instead used to integrate
rMake into other processes.
.TP
rMake also uses configuration values from conary. Conary configuration items 
used by rMake include:
.TP
.B buildFlavor
The base flavor that rMake will use when building troves.
.TP
.B buildLabel
The label that rMake will use to find troves to build.
.TP
.B cleanAfterCook
If True, rMake will clean up after successful builds.
.TP
.B flavor
rMake uses this list of flavors to satisfy build reqs and resolve dependencies 
when building.
.TP
.B installLabelPath
This is the search path used by rmake when finding troves to satisfy build
requirements, and when resolving dependencies for building.
.TP
.B repositoryMap
Maps a hostname from a label to a full URL for a networked repository.
Multiple maps can be given for a single label. (If no mapping is found,
\fBhttp://\f(BIhostname\fB/conary/\fR is used as the default map.)  See 
conary(1) for more information.
.TP
.B includeConfigFile
Immediately reads the listed configuration file.  The file name may include
shell globs, in which case all files matching the glob will be read in.
.\"
.\"
.\"
.SH PLUGINS
Plugin support is still under development.   More documentation will come as 
the plugin API stabilizes and plugins are written.
.\"
.\"
.\"
.SH BUGS
Please report bugs via http://issues.rpath.com/
.\"
.\"
.\"
.SH "SEE ALSO"
rmake-server(1)
.br
cvc(1)
.br
conary(1)
.br
http://www.rpath.com/
.br
http://wiki.rpath.com/
