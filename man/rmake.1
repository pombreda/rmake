.\" Copyright (c) 2006 rPath, Inc.
.TH RMAKE 1 "23 May 2006" "rPath, Inc."
.SH NAME
rmake \- Environment-controlled package building tool
.SH SYNOPSIS
.B rmake \fIcommand \fR[\fI<args>\fR]
.SH DESCRIPTION
\fBrmake\fR is a package building tool and is part of the \fBconary\fR suite
of programs. It differs from the \fBcvc\fR tool in that it can build a
collection of packages in a set of related builds, and it builds a chroot
based on the build requirements of the package.  Packages are built and
stored in a local repository until you wish to commit them.  

After packages have been built and stored into this exclusive rmake local
repository, they are then cloned from this repository to your main repository
upon committing them. For more information about the architecture of rMake,
see the rMake developer documentation (not yet available).

\fBNote that rmake is BETA software; any and all behavior is subject to
change with future releases.  Read the NEWS file for information on changes
and updates.\fR

.SH REFERENCE
rMake has several common command-line arguments, all of which modify
configuration entries and are documented with other configuration
entries at the bottom of this page.  The remaining command-line
arguments are specific to which rMake \fBcommand\fP you are invoking,
and are documented with the commands.

In most cases, the default behavior of rmake is based upon the behavior of
conary in a similar situation. For example, if conary rq foo returns package
foo from repository foo.rpath.com on your system, then rmake build foo will
build foo from that repository.  
.SS "Build Management"
The following \fBcommands\fP are used to start, query, monitor, and commit
builds using rMake.
.TP 4
.B [build|buildgroup] [<\fItrovename\fP[=\fI<versionSpec>\fP\fI[<flavor>]\fP>]|<recipe>]\fP
Builds the packages specified.  If a versionSpec is specified, it should
point to a source version of \fI<troveName>\fP. Although this command finds
source packages to build, the :source component part of the name is implicit.

If a recipe is specified, and that recipe is a source checkout from a
repository, then rmake will shadow that recipe to rmake's internal repository
and commit your local changes to that shadow.  Then, when you commit that
job, the related source component(s) will be also be committed.  

You can also build recipes that are not source checkouts, but you cannot
commit them; these builds only generate changesets.

Example: \fIrmake build 'glib=foresight.rpath.org@fl:desktop/1.0-1[!mysql]'\fP
would build glib from the foresight repository, with the mysql flavor turned
off.

More information on version specs and flavors is available in the conary
documentation and on the conary Wiki.

rMake can also build groups, redirects and filesets, \fIas long as they are the only trove specfied as part of the job\fP.  If these types of troves are specified as part of a larger job they will be failed.  This limitation may be lifted in a future version of rMake.

If you use the command buildgroup instead of build, groups that are specified at the command line will cause conary to find the matching \fIbinary\fP version of this group, and rebuild the packages within that group with the flavors they were built with previously.

.RS 4
.TP
.B \-\-flavor=FLAVOR
Specify the flavor to build with.  For example, rMake uses this parameter to 
support building x86 packages on x86_64 systems.  To build x86 troves on an
x86_64 system, type rmake build foo --flavor 'is:x86(~cmov,~i486,~i586,~i686)'
.TP
.B \-\-host=HOST
Can be used multiple times.  Limits a build to the given host(s).  This
command is useful when building groups using rmake, when you only have
control over commit access to a few labels.
.TP
.B \-\-poll
Runs \fIrmake poll\fP immediately after starting the build.
See \fIpoll\fP for more information.
.TP
.B \-\-quiet
Modifier to --poll to limit the amount of output printed when polling.
See \fIpoll\fP for more information.
.RE

.TP
.B changeset \fI<jobId>\fP \fI<path>\fP 

Creates a changeset for the given \fIjobId\fP and stores it at \fI<path>\fP.
The created changeset contains all the binaries built for this job.  This
works exactly like running conary changeset <packages> \fI<path\fP where
packages is a list of troves built by \fIjobId\fP.

.TP
.B commit \fI<jobId>\fP
(Alias: ci)

Commits the binaries built in jobId to repository where they were loaded.
This command is exactly like running several
\fIconary clone <branch> <packages>\fP commands, where branch is the branch
that the packages are built from.  Note that if you cooked from a recipe, then 
the source components are also committed upstream.

.TP
.B config
Displays the configuration settings for the rmake client, including build 
configuration. For more detail on configuration values see the FILES section 
below.
.RS 4
.TP 4
.B \-\-show-passwords
Normally, rmake config will mask passwords in repository maps, to avoid their
accidental display.  You can override this masking with --show-passwords.
.RE
.TP
.B delete \fI<jobId>[-<jobId>]+\fP
Deletes the given jobs and all associated data from your system.
.RE
.TP
.B poll \fI<jobId>\fP
Monitors the given jobId, printing out updates as they happen.  Will also tail 
any build logs.
.RS 4
.TP 4
.B \-\-quiet
Decreases the output of poll significantly, limiting it to critical
notifications, such as when a trove is building and when it has built or failed
to build.
.RE
.TP
.B query [\fI<jobId>\fR [\fItrovename\fP[=\fRversion][\fI<flavor>\fP]\fP]]+
If no arguments are given, information about all jobs are listed.  Otherwise, 
displays information about a job.  You can also query for a particular trove 
by specifying the trove after the jobId.

\fBNOTE: query output, options, and so on are very likely to change in future 
iterations of rmake.\fP
.RS 4
.TP 4
.B \-\-logs
Displays trove, job, and build logs for the particular job or trove.
.TP
.B \-\-info
Displays information on the specified job and troves, including build time
and status.
.TP
.B \-\-flavors
Displays full flavors of all troves.
See the conary manual page for more details about flavors.
.TP
.B \-\-full-versions
Full version strings are displayed instead of abbreviated version numbers
.TP
.B \-\-labels
Label plus version numbers are displayed instead of abbreviated version
numbers
.TP
.B \-\-poll
Runs \fIrmake poll\fP immediately after querying.  Convenience function.
See \fIpoll\fP for more information.
.TP
.B \-\-tracebacks
If a traceback is associated with a trove or job, that traceback is
displayed.
.TP
.B \-\-troves
Lists basic information about the troves within a trove.  This option is 
assumed with many other options.
.RE
.TP
.B stop \fI<jobId>\fP
Stops the given job, failing any current builds.
.RE
.\"
.\"
.\"
.SH FILES
.\" do not put excess space in the file list
.PD 0
.TP 4
.I /etc/rmake/rmakerc, ~/.rmakerc, and $PWD/rmakerc
The configuration file for the rmake client. rMake also reads in
/etc/conaryrc, $HOME/.conaryrc, and ./conaryrc to determine default values
for conary configuration, and also supports configuration contexts
(see conary(1) for information about contexts).  Note that for
simplicity, rMake reads in all conary configuration values. The currently
documented conary configuration values affect rMake operation.
 
Configuration values can also be specified via command line options,
including the \fB\-\-config\fR option, which allows you to override
one line in the config file, and the \-\-config-file option, which 
reads in an additional, supplied config file) override all 
configuration files. 

Note you can always use \fIrmake config\fR to see the current value of a
configuration item.  This is the best way to determine what rmake has
actually interpreted for the configuration value.
 
 Make configuration items can be strings,
booleans (\fBTrue\fP or \fBFalse\fP), or mappings (\f(BIto from\fP) and
can include:
.PD
.RS 4
.TP 4
.B defaultBuildReqs
Defines the troves to install in every build root, even if they are not
specified as build requirements for the package.  This should include enough
information to create a working chroot with conary and conary-build.
The default value is bash:runtime, coreutils:runtime conary:runtime,
conary-build:runtime, epdb (a debugging utility), dev:runtime, grep:runtime,
procps:runtime, sed:runtime, findutils:runtime, and gawk:runtime.
.TP
.B subscribe
Subscribe is an experimental option, and should not be used except by
developers. Documentation is forthcoming for this option.
.TP
.B resolveTroves
Specifies the troves to resolve against when building troves using rmake.
If build requirements and dependencies for build requirements can be found in
these groups, then rmake will use those troves to resolve dependencies.
This allows you to build troves in the context of a preexisting group,
for example, instead of just using what is latest on the label.

The resolveTroves list is ordered into "buckets".  One bucket is given for 
each resolveTrove line.  For example, if the two resolveTrove lines:

resolveTroves group-x11=foo.rpath.org@rpl:devel gtk=gtk.rpath.org@rpl:devel
resolveTroves group-dist

Were added, then the specified group-x11 and gtk would be searched before
group-dist.  Creating new buckets can slow down dependency resolution, however.

To disable resolveTroves, add the line 'resolveTroves []'
.TP
.B resolveTrovesOnly
resolveTrovesOnly turns off the use of the installLabelPath by conary, limiting
conary to only including troves that are referenced in resolveTroves.
.TP
.B strictMode
Strict mode disables the copying in of configuration files from your system.
The conary instance from your running system will not be copied into the build
root if strict mode is used; the conary instance installed in that root will
be used instead. If enforceManagedPolicy is off, strict mode will also turn it
on.

The following values are still copied into the chroot: repositoryMap and
entitlement info, user info, buildFlavor, flavor and installLabelPath.
.TP
.B targetLabel
Specifies the label to build troves against.  Modification of this value is
almost never necessary. By default, this is a label on the rmake internal
repository, \fIlocalhost\fP.  For more information on this repository, see
rmakeserver(1) and the architecture documentation.

When interpreting this value, rmake translates the case-insensitive value
none to the current value for the trove that is being built.  For example,
suppose you were building something from foo@rpl:1, and your targetLabel
was localhost@NONE:NONE, then the trove would be built on localhost@rpl:1.
.TP
.B uuid
A 32 character hex string that is a unique identifier for this build.  This 
value is generally not used for normal builds, but is instead used to integrate
rMake into other processes.
.TP
rMake also uses configuration values from conary. Conary configuration items 
used by rMake include:
.TP
.B buildFlavor
The base flavor that rMake will use when building troves.
.TP
.B buildLabel
The label that rMake will use to find troves to build.
.B flavor
rMake uses this list of flavors to satisfy build reqs and resolve dependencies 
when building.
.B installLabelPath
This is the search path used by rmake when finding troves to satisfy build
requirements, and when resolving dependencies for building.
.TP
.B repositoryMap
Maps a hostname from a label to a full URL for a networked repository.
Multiple maps can be given for a single label. (If no mapping is found,
\fBhttp://\f(BIhostname\fB/conary/\fR is used as the default map.)  See 
conary(1) for more information.
.TP
.B includeConfigFile
Immediately reads the listed configuration file.  The file name may include
shell globs, in which case all files matching the glob will be read in.
.\"
.\"
.\"
.SH BUGS
Please report bugs via http://issues.rpath.com/
.\"
.\"
.\"
.SH "SEE ALSO"
rmakeserver(1)
.br
cvc(1)
.br
conary(1)
.br
http://www.rpath.com/
.br
http://wiki.rpath.com/
